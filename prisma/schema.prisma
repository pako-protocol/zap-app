generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model SavedPrompt {
  id              String   @id @default(cuid())
  userId          String    
  title           String   @db.VarChar(255)
  content         String   @db.Text
  usageFrequency  Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastUsedAt      DateTime?
  isFavorite      Boolean  @default(false)

  user            User     @relation(fields: [userId], references: [id])

  @@index([userId, lastUsedAt], name: "idx_userId_lastUsedAt") 
  @@map("saved_prompts") 
}

model User {
  id        String   @id @default(cuid())
  privyId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  earlyAccess Boolean @default(false)
  degenMode  Boolean @default(false)

  wallets       Wallet[]
  conversations Conversation[]
  Rule          Rule[]
  Action        Action[]
  tokenStats    TokenStat[]
  TelegramChat  TelegramChat[]
  SavedPrompts SavedPrompt[]

  @@map("users")
}

model Wallet {
  id                  String       @id @default(cuid())
  ownerId             String
  name                String
  publicKey           String
  encryptedPrivateKey String?      @db.Text
  walletSource        WalletSource @default(CUSTOM)
  chain               Chain        @default(SOLANA)
  delegated           Boolean      @default(false)
  active              Boolean      @default(true)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  owner User @relation(fields: [ownerId], references: [id])

  @@unique([ownerId, publicKey])
  @@map("wallets")
}

model Conversation {
  id         String     @id @default(uuid())
  userId     String
  title      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lastReadAt DateTime?  @default(now())
  lastMessageAt DateTime?
  visibility Visibility @default(PRIVATE)

  user     User      @relation(fields: [userId], references: [id])
  messages Message[]
  Action   Action[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  role           String
  content        String?
  toolInvocations Json?
  experimental_attachments Json?
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}

enum Operator {
  eq
  lt
  gt
  contains
}

model Rule {
  id        String   @id @default(cuid())
  userId    String
  name      String   @db.VarChar(255)
  field     String   @db.VarChar(255) // Field to evaluate (e.g., "transaction.amount", "transaction.sender")
  operator  Operator
  value     String   @db.VarChar(255) // Value to compare against (e.g., "100", "0x1234")
  triggered Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("rules")
}

model Action {
  id             String    @id @default(cuid())
  userId         String
  conversationId String
  triggeredBy    Int[] // Array of rule IDs required to trigger this action
  stoppedBy      Int[] // Array of rule IDs required to stop this action
  frequency      Int? // Frequency in seconds (e.g., 3600 for 1 hour, 86400 for 1 day)
  maxExecutions  Int? // Times to execute before stopping
  name           String?   @db.VarChar(255) // User defined name for the action
  description    String    @db.VarChar(255) // Human readable description of the action, or message to send to AI
  actionType     String    @db.VarChar(255) // Type of action (e.g., "call_function", "invoke_api")
  params         Json? // JSON object for action parameters (e.g., inputs for the function)
  timesExecuted  Int       @default(0)
  lastExecutedAt DateTime?
  lastFailureAt  DateTime?
  lastSuccessAt  DateTime?
  triggered      Boolean   @default(false) // Whether the action has been triggered. True if triggeredBy is empty
  paused         Boolean   @default(false)
  completed      Boolean   @default(false)
  priority       Int       @default(0) // Priority level for execution, higher numbers execute first
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  startTime      DateTime? // Time to start executing the action

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@index([triggeredBy], name: "triggeredBy_idx")
  @@index([stoppedBy], name: "stoppedBy_idx")
  @@map("actions")
}

model TokenStat {
  id               String   @id @default(cuid())
  userId           String
  messageIds       String[]
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("token_stats")
}

model AccessCode {
  id       String  @id @default(cuid())
  name      String
  code  String @unique
  isValid    Boolean
  createdAt  DateTime @default(now())
  expireAt DateTime
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum WalletSource {
  CUSTOM
  PRIVY
}

enum Chain {
  SOLANA
}

model TelegramChat {
  id        String   @id @default(cuid())
  userId    String   @unique
  username  String
  chatId    String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("telegram_chats")
}



model Market {
  id            String   @id @default(uuid())
  name          String
  
  baseSilo      Silo     @relation("BaseSilo", fields: [baseSiloId], references: [id])
  baseSiloId    String   @unique

  bridgeSilo    Silo     @relation("BridgeSilo", fields: [bridgeSiloId], references: [id])
  bridgeSiloId  String   @unique

  tvl           Decimal? @default(0.0)
  volume        Decimal? @default(0.0)
  protocolFee   Decimal? @default(0.0)

  platform      Platform @relation(fields: [platformId], references: [id])
  platformId    String
  marketId      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([platformId])
  @@index([baseSiloId])
  @@index([bridgeSiloId])
}


model Silo {
  id                   String   @id @default(uuid())
  name                 String
  siloAddress          String   @unique
  ltv                  Decimal?
  liquidationThreshold Decimal?
  tvl                  Decimal? @default(0.0)

  marketBase           Market?  @relation("BaseSilo")
  marketBridge         Market?  @relation("BridgeSilo")

  tokenId              String
  token                Token    @relation(fields: [tokenId], references: [id])

  aprBorrow            Decimal? @default(0.0)
  aprDeposit           Decimal? @default(0.0)
  protocolFee          Decimal? @default(0.0)
  utilization          Decimal? @default(0.0)
  liquidationFee       Decimal? @default(0.0)
  riskLevel           RiskLevel @default(LOW)
  availableToBorrow    Decimal? @default(0.0)
  rewardMultipliers RewardMultiplier[]
  siloRewards        SiloRewardConfig?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([tokenId])
}

 model SiloRewardConfig {
  id                     String  @id @default(uuid())
  siloId                 String  @unique
  xpPerDollarDeposit     Float   @default(1.0) // XP per $1 deposit
  xpPerDollarBorrow      Float   @default(0.5) // XP per $1 borrowed
  sTokenRewardAPR  Float?            @default(0.0)
  siloRewardAPR   Float?       @default(0.0)
  sonicXpMultiplier       Float?  // e.g., 10x Sonic Points
  sonicXpMultiplierAction  MultiplierAction? @default(DEPOSIT)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  silo                   Silo   @relation(fields: [siloId], references: [id])
}

model RewardMultiplier {
  id         String  @id @default(uuid())
  siloId     String? // Still keep a link to silo if needed
  action     String  // "DEPOSIT" or "BORROW"
  tokenSymbol String  
  multiplier Float   // e.g., 2.0, 3.0
  silo       Silo?   @relation(fields: [siloId], references: [id])
  @@index([siloId])
}
model Platform {
  id         String  @id @default(uuid())
  name       String
  tvl        Decimal? @default(0.0)
  markets    Market[]
  vaults     Vault[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model HyperSonicTokens  {
    id         String  @id @default(uuid())
    tokenId   String  @unique
    token      Token   @relation(fields: [tokenId], references: [id])

    @@map("hypersonic_tokens")
}

model Token {
  id           String  @id @default(uuid())
  name         String
  symbol       String  @unique
  logo         String
  tokenAddress String
  vaultToken0 Vault[] @relation("VaultToken0")
  vaultToken1 Vault[] @relation("VaultToken1")
  silos        Silo[]
  hyperSonic   HyperSonicTokens? @relation
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

model Vault {
  id               String   @id @default(uuid())
  name             String
  vaultAddress     String   @unique
  vaultType        VaultType @default(CONCENTRATED)
  token0Id         String
  token1Id         String
  isToken0Allowed  Boolean
  isToken1Allowed  Boolean
  gauge            String
  platformId       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  token0           Token    @relation("VaultToken0", fields: [token0Id], references: [id])
  token1           Token    @relation("VaultToken1", fields: [token1Id], references: [id])
  platform         Platform @relation(fields: [platformId], references: [id])

  // Indexes
  @@index([name])
  @@index([token0Id])
  @@index([token1Id])
  @@index([platformId])
}

model Example {
    id   String   @id @default(uuid())
    name String
    link String
    thumbnail String
    createdAt DateTime @default(now())

    @@map("examples")
}

model Agent {
    id   String   @id @default(uuid())
    name String
    logo String
    description String
    features String?
    createdAt DateTime @default(now())
    @@map("agents")
}


enum VaultType {
  CONCENTRATED
  STABLE
  VOLATILE
}
enum MultiplierAction {
  DEPOSIT
  BORROW
  HOLD
}